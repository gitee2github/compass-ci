# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.
# frozen_string_literal: true

require 'set'
require_relative "#{ENV['LKP_SRC']}/lib/common"

# usage:
# foo = ErrorMessages.new(pkgbuild)
# pkgbuild is a file that includes errors generated by make
# error_id_array = foo.obtain_error_messages_by_error_id(error_id)
# error_id_array includes all error_messages that error same as error_id
# error_messages_hash = foo.obtain_error_messages
# error_messages_hash.each { |k,v| puts k; puts; v.each {|m| puts m } }
# output:
# src/arg.c:117:24: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
#
# src/arg.c:117:24: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
#   for (nbarg = 0; nbarg < ARGM_NBARGS && ((mask >> (nbarg * ARGT_BITS)) & ARGT_MASK); nbarg++);
#                         ^
class ErrorMessages
  def initialize(file)
    @file = file
    @seqno = ''
    @in_stderr = false
    @error_line = ''
    @error_details = ''
    @error_message = {}
    @error_messages = Hash.new { |h, k| h[k] = Set.new }
  end

  def obtain_error_messages
    File.open(@file).each_line do |line|
      next if extract_error_message(line)
      next unless @in_stderr
      next unless @error_message['error_line'] =~ /error|warning/i

      @error_messages[@error_message['error_line']] << @error_message['error_line'] + @error_message['error_details']
    end
    return @error_messages
  end

  def obtain_error_messages_by_error_id(error_id, return_error_line = false)
    error_messages_by_error_id = []
    error_messages = obtain_error_messages
    error_messages.each do |k, v|
      if "build-pkg.#{build_pkg_error_id(k)}" == error_id
        error_messages_by_error_id += return_error_line ? [k] : v.to_a
      elsif "pkgbuild.#{build_pkg_error_id(k)}" == error_id
        error_messages_by_error_id += return_error_line ? [k] : v.to_a
      end
    end
    error_messages_by_error_id
  end

  private

  def extract_error_message(line)
    if line =~ /^ /
      @error_details += line
    else
      update_error_message(line)
      case line
      when /^## ______________([0-9.]+):stderr$/
        @in_stderr = true
        @seqno = $1
        return true

      when /^## ______________#{@seqno}:enderr$/
        @in_stderr = false
        @seqno = ''
        add_error_message
      end
    end
  end

  def update_error_message(line)
    @error_message['error_line'] = @error_line
    @error_message['error_details'] = @error_details
    @error_line = line
    @error_details = ''
  end

  def add_error_message
    return unless @error_message['error_line'] =~ /error|warning/i

    @error_messages[@error_message['error_line']] << @error_message['error_line'] + @error_message['error_details']
  end
end
