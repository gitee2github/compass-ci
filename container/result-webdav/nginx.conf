# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/

user lkp;
worker_processes auto;
pid /run/nginx.pid;
env REDIS_HOST;
env REDIS_PORT;

events {}

http {
    server {
	listen 3080;
	server_name "result-webdav";
	server_tokens off;
	client_max_body_size 700m;
	access_log /tmp/access.log;
	error_log /tmp/error.log;

	location / {
		allow all;
		root /srv/;

		autoindex on;
		create_full_put_path on;
		dav_methods PUT MKCOL;
		dav_access user:rw group:rw all:rw;

		access_by_lua_block {
			function split(str, reps)
				local resultstrlist = {}
				string.gsub(str,'[^'..reps..']+',function (w)
					if w ~= nil then
						table.insert(resultstrlist,w)
					end
				end)
				return resultstrlist
			end

			redis_host = os.getenv("REDIS_HOST")
			redis_port = os.getenv("REDIS_PORT")

			local redis = require "resty.redis"
			local red = redis:new()
			red:set_timeout(1000)
			local ok, err = red:connect(redis_host, redis_port)
			if not ok then
				ngx.log(ngx.ERR, "connect redis: ", err)
				ngx.exit(ngx.HTTP_FORBIDDEN)
                	end

			job_id = ngx.var.cookie_JOBID
			uri = ngx.var.request_uri
			path = string.match(uri, "%g*/")
			upload_file = string.match(uri, "([^/]+)$")

			local res, err = red:hget("sched/id2upload_dirs", job_id)
			if not res or res == ngx.null then
				ngx.log(ngx.ERR, "failed to hget: ", err)
				ngx.exit(ngx.HTTP_FORBIDDEN)
			end

			if string.find(res, ",") then
				table = split(res,",")
				for i = 1, #table do
					if string.find(path, table[i]) then
						return
					end
			end
			else
				if string.find(path, res, 1, true) then
					return
				end
			end

			ngx.exit(ngx.HTTP_FORBIDDEN)
		}
	}

    }
}
