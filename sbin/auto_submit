#!/usr/bin/env ruby
# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.
# frozen_string_literal: true

require 'bunny'
require 'json'
require 'yaml'
require 'set'
require_relative '../lib/config_account'
require_relative "#{ENV['LKP_SRC']}/lib/do_local_pack"

# receive message and auto submit job
class AutoSubmit
  def initialize
    connection = Bunny.new('amqp://172.17.0.1:5672')
    connection.start
    channel = connection.create_channel
    @queue = channel.queue('new_refs')
  end

  def get_pkgbuild_repo(repo_array)
    pkgbuild_repo = "pkgbuild/#{repo_array[0]}"
    repo_array.each do |repo|
      next unless repo =~ /(-git|linux)$/

      pkgbuild_repo = "pkgbuild/#{repo}"
      break
    end
    return pkgbuild_repo
  end

  def get_argvs(newrefs_info)
    git_repo = newrefs_info['git_repo']
    puts "git_repo : #{git_repo}"
    url = Array(newrefs_info['url'])[0]
    submit_argv = ["#{ENV['LKP_SRC']}/sbin/submit --no-pack upstream_repo=#{git_repo} upstream_url=#{url}"]

    if newrefs_info['pkgbuild_repo']
      pkgbuild_repo = get_pkgbuild_repo(newrefs_info['pkgbuild_repo'])
      return unless pkgbuild_repo

      submit_argv.push("pkgbuild_repo=#{pkgbuild_repo}")
    end

    if newrefs_info['pkgbuild_source']
      submit_argv.push("pkgbuild_source=#{newrefs_info['pkgbuild_source'][0]}")
    end

    submit_argv
  end

  def submit_one_job(submit_argv, git_repo, belong, branch, commit_id)
    mirror_dir = "/srv/git/#{belong}/#{git_repo}.git"
    inactive_time = %x(git -C #{mirror_dir} log --pretty=format:"%cr" -1 #{commit_id})
    return if inactive_time =~ /(month|year)/

    real_argvs = Array.new(submit_argv)
    real_argvs.push("upstream_branch=#{branch}")
    real_argvs.push("upstream_dir=#{belong}")
    tag = %x(git -C #{mirror_dir} tag --points-at #{commit_id}).chomp
    real_argvs.push("upstream_tag=#{tag}") unless tag.empty?
    if git_repo.include?('my-sql_with_boostkit_patch')
      competi_argvs = get_argvs_for_competition(real_argvs, mirror_dir, branch, commit_id)
      real_argvs.push(competi_argvs)
    end
    real_argvs.push("upstream_commit=#{commit_id}")
    branch_command = get_branch_command(mirror_dir, branch)
    real_argvs.push(branch_command) if branch_command

    system(real_argvs.join(' '))
  end

  def get_branch_command(mirror_dir, branch)
    branch_command = %x(git -C #{mirror_dir} show #{branch}:'.cci/auto-submit' 2>/dev/null).chomp
    return nil if branch_command.empty? || branch_command.include?('submit') || branch_command.lines.size > 1

    return branch_command
  end

  def get_argvs_for_competition(real_argvs, mirror_dir, branch, commit_id)
    return if branch == 'master'

    argvs_for_base = Array.new(real_argvs)
    author_email = %x(git -C #{mirror_dir} log --format=%ae -1 #{commit_id}).chomp
    committer_email = %x(git -C #{mirror_dir} log --format=%ce -1 #{commit_id}).chomp

    if committer_email.include?('noreply')
      emails = %x(git -C #{mirror_dir} log --format=%ae -2 #{commit_id})
      if emails.lines.size == 2
        committer_email = emails.lines[0].chomp
        author_email = emails.lines[1].chomp
      end
    end

    base_commit = %x(git -C #{mirror_dir} merge-base master #{branch}).chomp
    argvs_for_base.push("upstream_commit=#{base_commit}")
    system(argvs_for_base.join(' '))
    commit_title = %x(git -C #{mirror_dir} log --format=%s -1 #{commit_id}).chomp

    return "author_email=#{author_email} committer_email=#{committer_email} base_commit=#{base_commit} commit_title=#{commit_title}"
  end

  def submit_specific_branch(submit_argv, newrefs_info, branches)
    branches.each do |branch_name|
      branch = "refs/heads/#{branch_name}"
      commit_id = newrefs_info['new_refs']['heads'][branch]
      next unless commit_id

      submit_one_job(submit_argv, newrefs_info['git_repo'], newrefs_info['belong'], branch_name, commit_id)
    end
  end

  def submit_non_specific(newrefs_info, submit_argv)
    newrefs_info['new_refs']['heads'].each do |branch, commit_id|
      branch = branch.delete_prefix('refs/heads/')
      submit_one_job(submit_argv, newrefs_info['git_repo'], newrefs_info['belong'], branch, commit_id)
    end
  end

  def get_commands_from_repository(newrefs_info)
    mirror_dir = "/srv/git/#{newrefs_info['belong']}/#{newrefs_info['git_repo']}.git"
    repository_commands = %x(git -C #{mirror_dir} show HEAD:'.cci/auto-submit' 2>/dev/null)
    return nil if repository_commands.empty?

    submit_info = YAML.safe_load(repository_commands)
    return nil if submit_info.nil? || submit_info['submit'].nil? || !submit_info.is_a?(Hash)

    return submit_info
  end

  # Add support of different branch different job
  # newrefs_info['submit'] is like:
  # [
  #  { "command" => "submit command 1",
  #    "branches" => [ "master", "next", ... ]
  #  },
  #  ...,
  #  { "command" => "submit command n",
  #    "branches" => [ "branch_name_a", "branch_name_b", ... ]
  #  }
  # ]
  def submit_job(newrefs_info)
    submit_argv = get_argvs(newrefs_info)
    return unless submit_argv

    repository_commands = get_commands_from_repository(newrefs_info)
    newrefs_info['submit'] = repository_commands unless repository_commands.nil?

    return unless newrefs_info['submit']

    newrefs_info['submit'].each do |element|
      argvs = Array.new(submit_argv)
      argvs.push(element['command'])
      if element['branches']
        submit_specific_branch(argvs, newrefs_info, element['branches'])
      else
        submit_non_specific(newrefs_info, argvs)
      end
    end
  end

  def listen
    @queue.subscribe(block: true) do |_delivery, _properties, message|
      Thread.new do
        message_info = JSON.parse(message)
        submit_job(message_info)
      end
      sleep(0.1)
    end
  end
end

config_yaml('auto-submit')
do_local_pack()
auto_submitter = AutoSubmit.new
auto_submitter.listen
