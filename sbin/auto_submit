#!/usr/bin/env ruby
# SPDX-License-Identifier: MulanPSL-2.0+
# frozen_string_literal: true

require 'bunny'
require 'json'
require 'yaml'

# receive message and auto submit job
class AutoSubmit
  def initialize
    connection = Bunny.new('amqp://172.17.0.1:5672')
    connection.start
    channel = connection.create_channel
    @queue = channel.queue('new_refs')
    @repo2job = YAML.load_file("#{$PROGRAM_NAME}.yaml")
  end

  def get_pkgbuild_repo(repo_array)
    pkgbuild_repo = nil
    repo_array.each do |repo|
      next unless repo =~ /-git$/

      pkgbuild_repo = "archlinux/#{repo}"
      break
    end
    return pkgbuild_repo
  end

  def submit(newrefs_info, submit_argv)
    newrefs_info['new_refs']['heads'].each_value do |value|
      commit_date = `git -C /srv/git/#{newrefs_info['git_repo']}.git log  --format=%ct -1 #{value}`
      submit_argv.push("upstream_commit=#{value}")
      submit_argv.push("commit_date=#{commit_date}")

      system(submit_argv.join(' '))
    end
  end

  def get_argvs(newrefs_info)
    git_repo = newrefs_info['git_repo']
    submit_argv = ["#{ENV['LKP_SRC']}/sbin/submit upstream_repo=#{git_repo}"]

    if newrefs_info['pkgbuild_repo']
      pkgbuild_repo = get_pkgbuild_repo(newrefs_info['pkgbuild_repo'])
      return unless pkgbuild_repo

      submit_argv.push("pkgbuild_repo=#{pkgbuild_repo}")
      submit_argv.push(@repo2job['archlinux'])
    else
      return unless @repo2job[git_repo]

      submit_argv.push(@repo2job[git_repo])
    end
    submit_argv
  end

  def submit_job(newrefs_info)
    submit_argv = get_argvs(newrefs_info)
    submit(newrefs_info, submit_argv) if submit_argv
  end

  def listen
    @queue.subscribe(block: true) do |_delivery, _properties, message|
      Thread.new do
        message_info = JSON.parse(message)
        submit_job(message_info)
      end
      sleep(0.1)
    end
  end
end

auto_submitter = AutoSubmit.new
auto_submitter.listen
