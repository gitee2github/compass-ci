#!/usr/bin/env ruby
# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.
# frozen_string_literal: true

require 'bunny'
require 'json'
require 'yaml'

# receive message and auto submit job
class AutoSubmit
  def initialize
    connection = Bunny.new('amqp://172.17.0.1:5672')
    connection.start
    channel = connection.create_channel
    @queue = channel.queue('new_refs')
    @repo2job = YAML.load_file("#{$PROGRAM_NAME}.yaml")
  end

  def get_pkgbuild_repo(repo_array)
    pkgbuild_repo = "archlinux/#{repo_array[0]}"
    repo_array.each do |repo|
      next unless repo =~ /(-git|linux)$/

      pkgbuild_repo = "archlinux/#{repo}"
      break
    end
    return pkgbuild_repo
  end

  def submit(newrefs_info, submit_argv)
    newrefs_info['new_refs']['heads'].each do |branch, commit_id|
      real_argvs = Array.new(submit_argv)
      real_argvs.push("upstream_branch=#{branch.delete_prefix('refs/heads/')}")
      real_argvs.push("upstream_commit=#{commit_id}")
      tag = %x(git -C /srv/git/#{newrefs_info['git_repo']}.git tag --points-at #{commit_id})
      real_argvs.push("upstream_tag=#{tag}") unless tag.empty?

      system(real_argvs.join(' '))
    end
  end

  def get_argvs(newrefs_info)
    git_repo = newrefs_info['git_repo']
    puts "git_repo : #{git_repo}"
    url = Array(newrefs_info['url'])[0]
    submit_argv = ["#{ENV['LKP_SRC']}/sbin/submit upstream_repo=#{git_repo} upstream_url=#{url}"]

    if newrefs_info['pkgbuild_repo']
      pkgbuild_repo = get_pkgbuild_repo(newrefs_info['pkgbuild_repo'])
      return unless pkgbuild_repo

      submit_argv.push("pkgbuild_repo=#{pkgbuild_repo}")
      repo2job_key = @repo2job[git_repo] ? git_repo : 'archlinux'
    else
      return unless @repo2job[git_repo]

      repo2job_key = git_repo
    end
    [submit_argv, repo2job_key]
  end

  def submit_job(newrefs_info)
    submit_argv, repo2job_key = get_argvs(newrefs_info)
    return unless submit_argv

    @repo2job[repo2job_key].each do |argv_config|
      argvs = Array.new(submit_argv)
      argvs.push(argv_config)
      submit(newrefs_info, argvs)
    end
  end

  def listen
    @queue.subscribe(block: true) do |_delivery, _properties, message|
      Thread.new do
        message_info = JSON.parse(message)
        submit_job(message_info)
      end
      sleep(0.1)
    end
  end
end

auto_submitter = AutoSubmit.new
auto_submitter.listen
