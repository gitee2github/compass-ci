#!/usr/bin/env ruby
# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.
# frozen_string_literal: true

# Usage:
#       es-find key=val ...
# if given multi keys, they create AND conditions
# if given val1,val2,... for a key, they create OR conditions
# Eg: query (testbox is xxx or yyy) and (suite is aaa) and (user is bbb).
#       es-find testbox=xxx,yyy suite=aaa user=bbb

require 'yaml'
require 'optparse'
require 'json'
require_relative '../lib/es_query.rb'
require_relative '../container/defconfig.rb'
require_relative '../lib/constants.rb'

def parse_argv
  items = {}
  ARGV.each do |item|
    key, value = item.split('=')
    if key && value
      value_list = value.split(',')
      items[key] = value_list.length > 1 ? value_list : value
    end
  end
  items
end

options = {}
options[:nr_jobs] = 10
opt_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: es-find [options] search_key1=val1[,val2..] ..'

  opts.separator 'search_key can be id, suite, os, etc.'
  opts.separator ''

  opts.on('-n', '--nr-jobs NUM', Integer, 'max jobs, default 10.') do |n|
    if n.to_i <= 0
      puts 'The value of the -n option must be a positive number.'
      exit(-1)
    end
    options[:nr_jobs] = n.to_i
  end

  opts.on_tail('-h', '--help', 'show this message') do
    puts opts
    exit
  end
end

opt_parser.parse!(ARGV)
items = parse_argv
es = ESQuery.new(ES_HOST, ES_PORT)
query_result = es.multi_field_query(items, size: options[:nr_jobs])
json_string = JSON.pretty_generate(query_result)
puts json_string
